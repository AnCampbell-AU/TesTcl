{"name":"TesTcl","tagline":"a Tcl library for unit testing iRules","body":"# Introduction\r\n\r\n**TesTcl** is a [Tcl](http://en.wikipedia.org/wiki/Tcl) library for unit testing\r\n[iRules](https://devcentral.f5.com/HotTopics/iRules/tabid/1082202/Default.aspx) which \r\nare used when configuring [F5 BigIP](http://www.f5.com/products/big-ip/) devices.\r\nThe goal of this library is to make it easy to unit test iRules used when load balancing HTTP traffic.\r\n\r\n## Getting started\r\n\r\nIf you're familiar with unit testing and [mocking](http://en.wikipedia.org/wiki/Mock_object) in particular,\r\nusing TesTcl should't be to hard. Check out the examples below:\r\n\r\n### Simple example\r\n\r\nLet's say you want to test the following simple iRule found in *simple_irule.tcl*:\r\n\r\n    rule simple {\r\n\r\n      when HTTP_REQUEST {\r\n        if { [HTTP::uri] starts_with \"/foo\" } {\r\n          pool foo\r\n        } else {\r\n          pool bar\r\n        }\r\n      }\r\n\r\n      when HTTP_RESPONSE {\r\n        HTTP::header remove \"Vary\"\r\n        HTTP::header insert Vary \"Accept-Encoding\"\r\n      }\r\n\r\n    }\r\n\r\nNow, create a file called *test_simple_irule.tcl* containing the following lines:\r\n\r\n    package require -exact testcl 0.9\r\n    namespace import ::testcl::*\r\n\r\n    # Comment in to enable logging\r\n    #log::lvSuppressLE info 0\r\n    \r\n    it \"should handle request using pool bar\" {\r\n      event HTTP_REQUEST\r\n      on HTTP::uri return \"/bar\"\r\n      endstate pool bar\r\n      run simple_irule.tcl simple\r\n    }\r\n\r\n    it \"should handle request using pool foo\" {\r\n      event HTTP_REQUEST\r\n      on HTTP::uri return \"/foo/admin\"\r\n      endstate pool foo\r\n      run simple_irule.tcl simple\r\n    }\r\n\r\n    it \"should replace existing Vary http response headers with Accept-Encoding value\" {\r\n      event HTTP_RESPONSE\r\n      verify \"there should be only one Vary header\" 1 == {HTTP::header count vary}\r\n      verify \"there should be Accept-Encoding value in Vary header\" \"Accept-Encoding\" eq {HTTP::header Vary}\r\n      HTTP::header insert Vary \"dummy value\"\r\n      HTTP::header insert Vary \"another dummy value\"\r\n      run irules/simple_irule.tcl simple\r\n    }\r\n\r\n#### Installing JTcl including jtcl-irule extensions\r\n\r\n##### Install JTcl\r\nDownload [JTcl](http://jtcl.kenai.com/), unzip it and add it to your path.\r\n\r\n##### Add jtcl-irule to your JTcl installation\r\nAdd the [jtcl-irule](http://landro.github.com/jtcl-irule/) extension to JTcl. If you don't have the time to build it yourself, you can download the \r\njar artifact from the [downloads](https://github.com/landro/TesTcl/downloads) section or you can use the direct [link](https://github.com/downloads/landro/TesTcl/jtcl-irule.jar).\r\nNext, copy the jar file into the directory where you installed JTcl.\r\nAdd jtcl-irule to the classpath in _jtcl_ or _jtcl.bat_.\r\nPut the following line just above the last line in the script\r\n\r\n    export CLASSPATH=$dir/jtcl-irule.jar:$CLASSPATH\r\n\r\n##### Verify installation\r\n\r\nCreate a script file named *jtcl test_jtcl_irule.tcl* containing the following lines \r\n\r\n    if {\"aa\" starts_with \"a\"} {\r\n      puts \"The jtcl-irule extension has successfully been installed\"\r\n    }\r\n\r\nand execute it using \r\n\r\n    jtcl test_jtcl_irule.tcl\r\n\r\nYou should get a success message.\r\n\r\n##### Add the testcl library to your library path\r\nDownload directory containing all the files found in this project (zip and tar.gz can be downloaded from this page)\r\nUnzip, and add unzipped directory to the [TCLLIBPATH](http://jtcl.kenai.com/gettingstarted.html) environment variable:\r\n\r\n    export TCLLIBPATH=whereever/landro-TesTcl-b93b1b4\r\n\r\nIn order to run this example, type in the following at the command-line:\r\n\r\n    >jtcl test_simple_irule.tcl\r\n\r\nThis should give you the following output:\r\n\r\n    **************************************************************************\r\n    * it should handle request using pool bar\r\n    **************************************************************************\r\n    -> Test ok\r\n\r\n    **************************************************************************\r\n    * it should handle request using pool foo\r\n    **************************************************************************\r\n    -> Test ok\r\n\r\n    **************************************************************************\r\n    * it should replace existing Vary http response headers with Accept-Encoding value\r\n    **************************************************************************\r\n    verification of 'there should be only one Vary header' done.\r\n    verification of 'there should be Accept-Encoding value in Vary header' done.\r\n    -> Test ok\r\n\r\n#### Explanations\r\n\r\n- Require the **testcl** package and import the commands and variables found in the **testcl** namespace to use it.\r\n- Enable or disable logging\r\n- Add the specification tests\r\n  - Describe every _it_ statement as precisely as possible.\r\n  - Add an _event_ . This is mandatory.\r\n  - Add one or several _on_ statements to setup expectations/mocks. If you don't care about the return value, return \"\".\r\n  - Add an _endstate_. This could be a _pool_, _HTTP::respond_ or _HTTP::redirect_ call.\r\n  - Add an _verify_. This is condition to evaluate after iRule execution. Describe every verification as precisely as possible, add as many verification as needed in particular test scenario.\r\n  - Add an HTTP::header initialization if you are testing modification of HTTP headers.\r\n  - Add a _run_ statement in order to actually run the Tcl script file containing your iRule. This is mandatory.\r\n\r\n_it_ statement has two arguments, description and code to execute as test case.\r\n_event_ statement has single argument - event type. Supported values are HTTP_REQUEST and HTTP_RESPONSE.\r\n_on_ statement has following syntax: _on_ ... (return|error) result\r\n_endstate_ statement accepts 2 to 5 arguments which are matched with command to stop processing iRule with success in test case evaluation.\r\n_verify_ statement four arguments. Syntax: _verify_ \"DESCRIPTION\" value _CONDITION_ {verification code}\r\n    - _description_ is displayed during verification execution\r\n    - _value_ is expected result of verification code\r\n    - _condition_ is operator used during comparison of _value_ with code result (ex. ==, !=, eq).\r\n    - _verification_code_ is code to evaluate after iRule execution\r\n_run_ statement has two arguments, file name of iRule source and name of iRule to execute\r\n\r\nThere is ready to use _HTTP::header_ mockup implementation, which simulates behavior of original F5 implementation (as described at [link](https://devcentral.f5.com/wiki/irules.HTTP__header.ashx)). However _insert_modssl_fields_ subcommand is not supported in current version.\r\n\r\n\r\n#### Avoiding code duplication using the before command\r\n\r\nIn order to avoid code duplication, one can use the _before_ command.\r\nThe argument passed to the _before_ command will be executed _before_ the following _it_ specifications.\r\n\r\nNB! Be carefull with using _on_ commands in _before_. If there will be another definition of the same expectation in _it_ statement, only first one will be in use (this one set in _before_).\r\n\r\nUsing the _before_ command, *test_simple_irule.tcl* can be rewritten as:\r\n\r\n    package require -exact testcl 0.9\r\n    namespace import ::testcl::*\r\n\r\n    # Comment in to enable logging\r\n    #log::lvSuppressLE info 0\r\n\r\n    before {\r\n      event HTTP_REQUEST\r\n    }\r\n\r\n    it \"should handle request using pool bar\" {\r\n      on HTTP::uri return \"/bar\"\r\n      endstate pool bar\r\n      run simple_irule.tcl simple\r\n    }\r\n\r\n    it \"should handle request using pool foo\" {\r\n      on HTTP::uri return \"/foo/admin\"\r\n      endstate pool foo\r\n      run simple_irule.tcl simple\r\n    }\r\n\r\n    it \"should replace existing Vary http response headers with Accept-Encoding value\" {\r\n      # NB! override event type set in before\r\n      event HTTP_RESPONSE\r\n\r\n      verify \"there should be only one Vary header\" 1 == {HTTP::header count vary}\r\n      verify \"there should be Accept-Encoding value in Vary header\" \"Accept-Encoding\" eq {HTTP::header Vary}\r\n      HTTP::header insert Vary \"dummy value\"\r\n      HTTP::header insert Vary \"another dummy value\"\r\n      run irules/simple_irule.tcl simple\r\n    }\r\n\r\nOn a side note, it's worth mentioning that there is no _after_ command, since we're always dealing with mocks.\r\n\r\n### Advanced example\r\n\r\nLet's have a look at a more advanced iRule (advanced_irule.tcl):\r\n\r\n    rule advanced {\r\n\r\n      when HTTP_REQUEST {\r\n\r\n        HTTP::header insert X-Forwarded-SSL true\r\n\r\n        if { [HTTP::uri] eq \"/admin\" } {\r\n          if { ([HTTP::username] eq \"admin\") && ([HTTP::password] eq \"password\") } {\r\n            set newuri [string map {/admin/ /} [HTTP::uri]]\r\n            HTTP::uri $newuri\r\n            pool pool_admin_application\r\n          } else {\r\n            HTTP::respond 401 WWW-Authenticate \"Basic realm=\\\"Restricted Area\\\"\"\r\n          }\r\n        } elseif { [HTTP::uri] eq \"/blocked\" } {\r\n          HTTP::respond 403\r\n        } elseif { [HTTP::uri] eq \"/app\"} {\r\n          if { [active_members pool_application] == 0 } {\r\n            if { [HTTP::header User-Agent] eq \"Apache HTTP Client\" } {\r\n              HTTP::respond 503\r\n            } else {\r\n              HTTP::redirect \"http://fallback.com\"\r\n            }\r\n          } else {\r\n            set newuri [string map {/app/ /} [HTTP::uri]]\r\n            HTTP::uri $newuri\r\n            pool pool_application\r\n          }\r\n        } else {\r\n          HTTP::respond 404\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\nThe specs for this iRule would look like this:\r\n\r\n    package require -exact testcl 0.9\r\n    namespace import ::testcl::*\r\n\r\n    # Comment out to suppress logging\r\n    #log::lvSuppressLE info 0\r\n\r\n    before {\r\n      event HTTP_REQUEST\r\n      HTTP::header insert X-Forwarded-SSL true\r\n    }\r\n\r\n    it \"should handle admin request using pool admin when credentials are valid\" {\r\n      on HTTP::uri return \"/admin\"\r\n      on HTTP::username return \"admin\"\r\n      on HTTP::password return \"password\"\r\n      on HTTP::uri /admin return \"\"\r\n      endstate pool pool_admin_application\r\n      run advanced_irule.tcl advanced\r\n    }\r\n\r\n    it \"should ask for credentials when admin request without correct credentials\" {\r\n      on HTTP::uri return \"/admin\"\r\n      on HTTP::username return \"not_admin\"\r\n      on HTTP::password return \"wrong_password\"\r\n      endstate HTTP::respond 401 WWW-Authenticate \"Basic realm=\\\"Restricted Area\\\"\"\r\n      run advanced_irule.tcl advanced\r\n    }\r\n\r\n    it \"should block access to uri /blocked\" {\r\n      on HTTP::uri return \"/blocked\"\r\n      endstate HTTP::respond 403\r\n      run advanced_irule.tcl advanced\r\n    }\r\n\r\n    it \"should give apache http client a correct error code when app pool is down\" {\r\n      on HTTP::uri return \"/app\"\r\n      on active_members pool_application return 0\r\n      HTTP::header insert User-Agent \"Apache HTTP Client\"\r\n      endstate HTTP::respond 503\r\n      run advanced_irule.tcl advanced\r\n    }\r\n\r\n    it \"should give other clients then apache http client redirect to fallback when app pool is down\" {\r\n      on HTTP::uri return \"/app\"\r\n      on active_members pool_application return 0\r\n      HTTP::header insert User-Agent \"Firefox 13.0.1\"\r\n      endstate HTTP::redirect \"http://fallback.com\"\r\n      run advanced_irule.tcl advanced\r\n    }\r\n\r\n    it \"should give handle app request using app pool when app pool is up\" {\r\n      on HTTP::uri return \"/app\"\r\n      on HTTP::uri /app return \"\"\r\n      on active_members pool_application return 2\r\n      endstate pool pool_application\r\n      run advanced_irule.tcl advanced\r\n    }\r\n\r\n    it \"should give 404 when request cannot be handled\" {\r\n      on HTTP::uri return \"/cannot_be_handled\"\r\n      endstate HTTP::respond 404\r\n      run advanced_irule.tcl advanced\r\n    }\r\n    \r\n    stats\r\n\r\n\r\n### Modification of HTTP headers example\r\n\r\nLet's have a look at a another iRule (headers_irule.tcl):\r\n    \r\n    rule headers {\r\n    \r\n      #notify backend about SSL using X-Forwarded-SSL http header\r\n      #if there is client certificate put common name into X-Common-Name-SSL http header\r\n      #if not make sure X-Common-Name-SSL header is not set\r\n      when HTTP_REQUEST {\r\n        HTTP::header insert X-Forwarded-SSL true\r\n        HTTP::header remove X-Common-Name-SSL\r\n        \r\n        if { [SSL::cert count] > 0 } {\r\n          set ssl_cert [SSL::cert 0]\r\n          set subject [X509::subject $ssl_cert]\r\n          set cn \"\"\r\n          foreach { label value } [split $subject \",=\"] {\r\n            set label [string toupper [string trim $label]]\r\n            set value [string trim $value]\r\n            \r\n            if { $label == \"CN\" } {\r\n              set cn \"$value\"\r\n              break\r\n            }\r\n          }\r\n        \r\n          HTTP::header insert X-Common-Name-SSL \"$cn\"\r\n        }\r\n      }\r\n    \r\n    }\r\n\r\nThe example specs for this iRule would look like this:\r\n\r\n    package require -exact testcl 0.9\r\n    namespace import ::testcl::*\r\n\r\n    # Comment out to suppress logging\r\n    #log::lvSuppressLE info 0\r\n\r\n    before {\r\n      event HTTP_REQUEST\r\n      verify \"There should be always set HTTP header X-Forwarded-SSL to true\" true eq {HTTP::header X-Forwarded-SSL}\r\n    }\r\n\r\n    it \"should remove X-Common-Name-SSL header from request if there was no client SSL certificate\" {\r\n      HTTP::header insert X-Common-Name-SSL \"testCommonName\"\r\n      on SSL::cert count return 0\r\n      verify \"There should be no X-Common-Name-SSL\" 0 == {HTTP::header exists X-Common-Name-SSL}\r\n      run irules/headers_irule.tcl headers\r\n    }\r\n\r\n    it \"should add X-Common-Name-SSL with Common Name from client SSL certificate if it was available\" {\r\n      on SSL::cert count return 1\r\n      on SSL::cert 0 return {}\r\n      on X509::subject [SSL::cert 0] return \"CN=testCommonName,DN=abc.de.fg\"\r\n      verify \"X-Common-Name-SSL HTTP header value is the same as CN\" \"testCommonName\" eq {HTTP::header X-Common-Name-SSL}\r\n      run irules/headers_irule.tcl headers\r\n    }\r\n\r\n## How stable is this code?\r\nThis work is quite stable, but you can expect minor breaking changes.\r\n\r\n## Why I created this project\r\n\r\nConfiguring BigIP devices is no trivial task, and typically falls in under a DevOps kind of role.\r\nIn order to make your system perform the best it can, you need:\r\n\r\n- In-depth knowledge about the BigIP system (typically requiring at least a [$1,995 3-day course](http://www.f5.com/services/global-training/course-descriptions/big-ip-ltm-essentials.html))\r\n- In-depth knowledge about the web application being load balanced \r\n- The Tcl language and the iRule extensions\r\n- And finally: _A way to test your iRules_\r\n\r\nMost shops test iRules [manually](http://en.wikipedia.org/wiki/Manual_testing), the procedure typically being a variation of the following:\r\n\r\n- Create/edit iRule\r\n- Add log statements that show execution path\r\n- Push iRule to staging/QA environment\r\n- Bring backend servers up and down **manually** as required to test fallback scenarios\r\n- Generate HTTP-traffic using a browser and verify **manually** everything works as expected\r\n- Verify log entries **manually**\r\n- Remove or disable log statements\r\n- Push iRule to production environment\r\n- Verify **manually** everything works as expected \r\n\r\nThere are lots of issues with this **manual** approach:\r\n\r\n- Using log statements for testing and debugging messes up your code, and you still have to look through the logs **manually**\r\n- Potentially using different iRules in QA and production make automated deployment procedures harder\r\n- Bringing servers up and down to test fallback scenarios can be quite tedious\r\n- **Manual** verification steps are prone to error\r\n- **Manual** testing takes a lot of time\r\n- Development roundtrip-time is forever, since deployment to BigIP sometimes can take several minutes\r\n\r\nClearly, **manual** testing is not the way forward!\r\n\r\n## Getting help\r\n\r\nPost questions to the group at [TesTcl user group](https://groups.google.com/forum/?fromgroups#!forum/testcl-user)  \r\nFile bugs over at [github](https://github.com/landro/TesTcl)\r\n\r\n## License\r\n\r\nJust like JTcl, TesTcl is licensed under a BSD-style license. \r\n\r\n## Please please please\r\n\r\nDrop me a line if you use this library and find it useful: stefan.landro **you know what** gmail.com\r\n\r\nYou can also check out [my LinkedIn profile](http://no.linkedin.com/in/landro)","google":"UA-33046216-1","note":"Don't delete this file! It's used internally to help with page regeneration."}